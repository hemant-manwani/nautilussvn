#summary This page, as the title implies, describes the architecture of NautilusSvn.
#labels Phase-Implementation

== Overall architecture ==

[http://nautilussvn.googlecode.com/svn/wiki/images/architecture/overall_architecture.png]

== Components ==

=== Extension ===

`[..]`

=== GUI ===

`[..]`

=== D-Bus Service ===

==== Status Monitor ====

The only way to have the status for items stay up-to-date is by monitoring all items within a working copy and the related metadata (contained in the working copy administration areas, the .svn directories). The mechanism used to actually monitor the working copies is gio.GFileMonitor.

The status monitor will notice all changes to all files/directories and the .svn/entries file (which is the only file modified when doing SVN operations). It will then add all of the modified paths to a queue which is handled when the status monitor returns to an idle state to prevent too many checks from being done and conflicting. 

==== Cache ====

`[..]`

=== VCS Abstraction Layer ===

`[..]`

== Unsorted ==

  * Skipping intensive operations while on battery power may be a good idea.

  * It may well be possible to do some magic and determine the status of a particular item without having to do an svn status check, but this looks really hard.

  * I wonder if it's possible to analyze the .svn/entries file to determine precisely what files were modified.