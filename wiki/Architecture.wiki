#summary This page, as the title implies, describes the architecture of NautilusSvn.
#labels Phase-Implementation

= Introduction =
In this page we'll look at what exactly a Nautilus extension is (the interface etc.) and dive into the NautilusSvn specifics.

= General =

== The basics of a Nautilus extension ==
NautilusSvn is a Nautilus extension written in Python using the [http://svn.gnome.org/viewvc/nautilus-python/trunk/ Python bindings for the Nautilus extension library] (nautilus-python in short). For an extensive introduction see [http://www.campd.org/stuff/docs/extending-nautilus/NautilusExtensions.html Nautilus Extensions].

A Nautilus extension can implement a couple of providers (interfaces), namely: 

  * NautilusInfoProvider: Information providers are used to add data to a NautilusFileInfo object and keep it up to date.
  * NautilusColumnProvider: Column providers add information to display in the list and icon views.
  * NautilusMenuProvider: Menu providers add menu items. Menu items can be added in three places: Per-file (shown in the file's context menu and the Edit menu), per-folder (shown in the background context menu and the File menu), and the toolbar.
  * NautilusPropertyPageProvider: Property providers add a property page to the file properties dialog.

Each of these providers come with their own set of functions one has to implement which in turn Nautilus will call to get 'things done'. We'll take a look specifically at NautilusInfoProvider.

== NautilusInfoProvider ==
When implementing the NautilusInfoProvider interface one has to implement the update_file_info function. 

  * TODO: write something about when update_file_info is exactly called and the relation with invalidate_extension_info on a GnomeVFSFileInfo. 

= Specifics =

== Directory structure ==
The annoted tree below shows the most important directories (packages basically).

{{{

nautilussvn
|-- lib
|   |-- dbus             # our DBus services live here, mostly to interface with the StatusMonitor
|   |-- extensions       # the actual Nautilus extension code lives here so NautilusSvn and MainContextMenu
|   |-- settings.py      # our settings back-end
|   `-- vcs              # Our VCS specific code, also includes the StatusMonitor
`-- ui                   # the entire UI layer lives here (everything)
}}}

== Components ==

=== Status cache ===

Take the entire TortoiseSVN working copy for example (which has 6,015 items). Without a status cache an initial recursive status check using PySVN would take 4393.7271 milliseconds (4 seconds) and consecutive status checks would take 917.6600 milliseconds (around a second).


== Frequently Asked Questions (FAQ) ==
=== Why do you use DBus? ===

Mostly a workaround for not being able to use threads from within a Nautilus extension (see source code). Don't ask us why, we don't know. 