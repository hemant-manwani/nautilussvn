#summary This page, as the title implies, describes the architecture of NautilusSvn.
#labels Phase-Design

= Overall architecture =

[http://nautilussvn.googlecode.com/svn/wiki/images/architecture/overall_architecture.png]

= Components =

== Extension =

`[..]`

== GUI ==

`[..]`

== D-Bus Service ==

=== Status Monitor ===

  _Responsibilities: manage watches, process events, request status checks, do status checks, maintain status tree_

The only way to have the status for items stay up-to-date is by monitoring all items within a working copy and the related metadata (contained in the working copy administration areas, the .svn directories). The mechanism used to actually monitor the working copies is gio.GFileMonitor.

Upon encountering a working copy for the first time a recursive status check is done to build the status tree for that working copy. The status monitor will watch for any changes to all files/directories and the .svn/entries file (which is the only file modified when doing SVN operations) and modify the status tree accordingly. 

Say you have a directory /foo containing bar and baz and you then svn add bar and modify baz. This results in changes for /foo/bar and /foo/.svn/entries. If we could figure out by comparing the previous entries file what item was modified we could then add /foo/bar and /foo/baz to the queue for later processing (to prevent too many checks from being done and conflicting). 

Then when the status monitor returns to an idle state the queue is processed, status checks are done for /foo/bar and /foo/baz and their status in the tree is updated accordingly, the parent directories will then update their own status based on any children in the tree.

==== Handling changes ====

When the monitor detects a change has  occurred, either to a versioned item itself or the associated metadata, it will process the event. If the item in question is not versioned it will skip it (this handles temporary files etc. quite nicely), if the item is however versioned it will add an invalidating status request to the queue for this file and non-invalidating ones for all parent directories.

==== Status queue ====

When a status check is requested it is not immediately executed, instead the path and the type of check requested (recursive/non-recursive) are stored in a queue. Any duplicate requests will not be added to the queue and recursive status checks invalidate all related requests. Once the queue manager determines that an idle state has been reached it will start processing the queue.

==== Status tree ====

`[..]`

==== Communication with the client ====

Initial:

  * User enters directory
  * Client requests a watch to be added
  * Client is notified the watch has been added
  * Client requests status information
  * Status monitor calls client back with the result

Consecutive:

  * User does some operation
  * Status monitor notices changes
  * Status monitor updates status tree
  * Status monitor notifies client about any changes


== VCS Abstraction Layer ==

  _See [http://bitbucket.org/RonnyPfannschmidt/anyvc/ anyvc]_

= Unsorted =

  * Skipping intensive operations while on battery power may be a good idea.

  * I wonder if it's possible to analyze the .svn/entries file to determine precisely what files were modified.