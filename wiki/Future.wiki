#summary Brainstorming for all decisions related to NautilusSvn (mostly architectural stuff)
#labels Phase-Design

= Introduction =
The main concerns are:

  * Separation of actual version control logic and UI logic
    * Eventually we'll want to be able to support multiple version control systems, but at the moment we'll just focus on Subversion
  * Separation from the actual implementation (e.g. Nautilus, Thunar, Dolphin, PCManFM etc.)
  * Minimizing repetition (repeating statements, logic etc.)

= Directory structure =

A list of projects to borrow ideas from: [http://dev.deluge-torrent.org/browser/trunk Deluge], [http://www.exaile.org/downloads Exaile], [http://musicbrainz.org/doc/PicardDownload MusicBrainz Picard] and [http://svn.gnome.org/viewvc/gnome-games/trunk/gnome-sudoku/ GNOME Sudoku] (also [http://svn.gnome.org/viewvc/nautilus/trunk/ Nautilus Actions] and [http://svn.gnome.org/viewvc/nautilus/trunk/ Nautilus])

Here's a possible directory structure to keep the files organized:

{{{
|-- COPYING
|-- README
|-- nautilussvn
|   |-- data
|   |   `-- icons
|   |-- docs
|   |-- lib
|   |   |-- extensions
|   |   |   `-- nautilus
|   |   `-- vcs
|   |       `-- svn.py
|   |-- po
|   |-- tests
|   `-- ui
|       `-- glade
|-- packages
}}}

_`__init__.py files left out for clarity`_

= Modularity =
  _How will we achieve the separation (loose coupling) we want?_