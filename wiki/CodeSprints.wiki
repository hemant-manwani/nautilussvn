#summary Wiki page for using when we do code sprints

<wiki:toc max_depth="2" />

= 14 march 2009 =

== Can helper.py:launch_ui_window return a pid? ==

I'm wondering about return_immmediately:

{{{
$ grep -n -i -R "return_immmediately=false" .
./nautilussvn/ui/commit.py:385:            return_immmediately=False
./bin/nautilussvn:44:launch_ui_window(module, args, return_immmediately=False)
}}}

== v0.11's monitoredFiles thingy ==
So, without a complete status monitor you can't really keep track of things that happen. So: 

  * One choice is to register callbacks with all dialog functions so it will tell the extension exactly what paths to update. This would probably be nice, but atm every dialog is spawned using subprocess and there is no communication possible. This is a lot like v0.11.

  * v0.11 monitored /proc after starting any process and waited for the program to exit then it used a monitoredFiles stack (similar to our nautilusVFSFile thing, except it was only for files that were modified, added or deleted) which it would go through and invalidate all items (after which Nautilus would grab the correct status). There's one problem with this, monitoredFiles would contain all modified, added or deleted files the user has ever seen from all working copies the user has ever seen. This can have pretty bad effects.

That last bit also means that: say you saw a file and it was unversioned, if somebody then added the file from some top folder, the next time you see the file it would still look unversioned. I think?

== Everything with Popen and shell=true needs to go ==
Won't handle spaces, quotes, etc. properly. Use (example):

{{{
Popen(["nautilus", "--no-desktop", "--browser", os.path.dirname(os.path.abspath(path))]).pid
}}}

Instead of:
{{{
subprocess.Popen(
    "nautilus --no-desktop --browser %s" % 
    os.path.dirname(os.path.abspath(path)), 
    shell=True
)

}}}

== Why is update_file_items being called twice? ==

{{{
DEBUG	nautilussvn.lib.extensions.nautilus	update_file_info() called for /home/bruce/Development/nautilussvn/trunk
DEBUG	nautilussvn.lib.extensions.nautilus	update_file_info() called for /home/bruce/Development/nautilussvn/trunk
}}}

A: It's not, the logger is doing this. Why?

Why? Because it uses addHandler and everytime a Log instance is created addHandler is called which just adds to the handler that is already there.

The logger seems a little too complicated, can't we do something simpler? Yes, we want a file log and a console log, and yes the logging module is cool, but this is too much code.

Replaced locally temporarily with just:

{{{
import logging
logging.basicConfig(level=logging.DEBUG)

class Log():
    
    def __init__(self, module):
        self.module = module
        
    def debug(self, message):
        print "DEBUG: %s: %s" % (self.module, message)
}}}