#summary Directions, notes and tips for packaging NautilusSVN for various distributions
#labels Phase-Implementation

*WARNING!* - This page is a work in progress! Stick with the current [Packaging packaging directions] until we've sorted it out.

= Introduction =

While it is possible to run NautilusSVN from our tarball releases or even the SVN trunk, most users will probably want to install a package that conforms to the requirements of their particular GNU/Linux distribution.

This page details the methods we use to maintain the packages. There are specific tools for Debian and Ubuntu that make it easy (or at least safe) to perform a lot of common tasks, and these are also given an overview.

_Note: there are also similar tools for Fedora, but I haven't researched them yet._

= In General =

The examples below are Debian-centric, because that's what I use. Just replaced the *first* occurrence (not all) of `debian` with your distribution:
  * Packaging for Ubuntu (currently Jaunty) is in `/svn/packaging/ubuntu/trunk`
  * Packaging for Debian (always Sid) is in `/svn/packaging/debian/trunk`
  * Packaging for Fedora may be coming soon

= Snapshots =

*WARNING:* right now, I would recommend checking out from SVN HEAD as a single user [DevelopmentInstallation development install]. These instructions will *NOT* work until I sort out some details of packaging and organise the repo. [â€”Jason]

If you want to build a development snapshot, you don't really need to bother about a checkout (since you're packaging the results anyway). Better to do an export:

1. Check out the development snapshot (I'm assuming your working dir is :
{{{
cd ~/Development/nautilussvn
svn --force export http://nautilussvn.googlecode.com/svn/tags/latest-snapshot .
svn --force export http://nautilussvn.googlecode.com/svn/packaging/distribution/snapshot .
}}}

2. Install build dependencies. Instructions coming soon, I promise. Usually it's:
{{{
sudo aptitude build-dep nautilussvn
}}}

...but I need to confirm. If you're using [http://www.netfort.gr.jp/~dancer/software/pbuilder-doc/pbuilder-doc.html pbuilder], skip this step.

3. Change the version:

{{
dch --local snapshot "Snapshot build."
}}

3. Build the package:

Personally, I like [http://www.netfort.gr.jp/~dancer/software/pbuilder-doc/pbuilder-doc.html pbuilder]. But these instructions use *debuild*:

{{
debuild -us -uc -b
}}

4. Install the package. Ubuntu users have a graphical interface for that (I think), and Debian users can tough it out until someone writes one (I use a local repo in /var/repository, STW for instructions or just use `dpkg -i` and sort out dependencies later).

= In Short =

== Tagged Release ==

To build a particular Debian package (eg. 0.12.1.beta2-3):

  # Check out */packages/debian/tags/0.12.1.beta2-3* to (eg) *nautilussvn*
  # Check out */packages/debian/tarballs/* to (literally) *tarballs*
  # Change to the directory in step (1) and run `svn-buildpackage -us -uc`

== Build From Trunk ==

To build a deb of the trunk for Debian Squeeze:

  * Check out */trunk* (or just be using your working copy)
  * Merge with */packaging/debian/nautilussvn/trunk*
    * (on the command line, this is `svn merge http://...repo.../packaging/debian/trunk`)
    * under svn 1.6, you can just do `svn merge ^/packaging/debian/trunk`
    * you can do this the other way around - check out packaging, merge with trunk
  * Run `svn propdel mergeWithUpstream debian` (this is necessary to stop it trying to look for a tarball - *make sure it isn't committed!* ... I'll try to find out if there's a better tool)
  * I recommend running `dch -i` or `dch --local myname` to bump the version up and make it obvious that it's a local build
  * Run `svn-buildpackage -us -uc --svn-ignore`

== Notes ==

  * *svn-buildpackage* will put things in *../build-area*
  * If you don't want to use *svn-buildpackage*, export your working copy (`svn export . ../nsvn-export`) and use (eg.) *debuild* from your exported dir.

= Tools =

== Debian and Ubuntu ==

[http://www.debianpaket.de/svn-buildpackage/index.html svn-buildpackage] - allows you to build packages straight out of a working copy (if you just invoke debuild, it will choke on the .svn dirs). We use the [http://www.debianpaket.de/svn-buildpackage/ch-import.html#s3.2 merge-with-upstream mode].

[http://www.netfort.gr.jp/~dancer/software/pbuilder-doc/pbuilder-doc.html pbuilder] - personal package builder. This creates and maintains a chroot jail for building packages targeted at a specific Debian-like distribution. For example, if you run Debian Squeeze you could use pbuilder to build packages for Debian Sid (unstable) and Ubuntu Jaunty, without needing any other changes to your system. Pbuilder 'starts from scratch' before every build, so it is especially useful for checking that you have all the right build dependencies.

[http://workaround.org/debian-subversion-pbuilder svn-buildpackage + pbuilder] - these can be used together, and with a bit of tweaking can really streamline package development. Use svn-buildpackage to maintain the repository, and make it call pbuilder to actually do the build.

This can be facilitated with the following lines in *~/.bashrc* (or wherever you like). The first does a proper build for a maintainer to sign and release, the second does a "quick and dirty" build, not making a fuss if you haven't committed changes yet.

{{{
alias svn-bld='svn-buildpackage --svn-builder="pdebuild --buildresult `pwd`/../build-area --auto-debsign"'
alias svn-bld-q='svn-buildpackage --svn-ignore --svn-builder="pdebuild --buildresult `pwd`/../build-area"'
}}}

= Repository Structure =

The *packaging* directory, found in the root of the repository, contains subdirectories corresponding to the various distributions we can package for. Depending on the tools used to maintain the various packages, there will be varying structures underneath.

In general though, the packaging directories should contain the upstream tarballs and packaging information ONLY (eg, only the debian dir), if at all possible. Official releases should be tagged.