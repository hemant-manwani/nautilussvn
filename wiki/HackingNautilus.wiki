#summary This page shows you how to work on Nautilus
#labels Phase-Implementation

= Notes =

  * _If you came here looking to work on http://brainstorm.ubuntu.com/idea/15752/ (When abbreviating filenames, cut out the middle, keep the beginning and end). Please take a look at. The interesting files are libnautilus-private/nautilus-file.c, src/file-manager/fm-directory-view.c and libnautilus-private/nautilus-cell-renderer-text-ellipsized.c. Also see [http://library.gnome.org/devel/gtk/stable/GtkCellRendererText.html#GtkCellRendererText--ellipsize GtkCellRendererText] and [http://www.google.com/custom?domains=library.gnome.org&sitesearch=library.gnome.org&q=ellipsize this search query for the Pango docs]._

= Introduction =
Sometimes a feature will be missing either from the Nautilus Python bindings (such as was the case with submenu support for quite a while) or Nautilus itself. In that case you'll have to hack Nautilus. This guide will explain how to get, build and develop for Nautilus.

The first barrier to developing for Nautilus is familiarity with how GNOME projects are organized. Though there's an overwhelming amount of documentation it's not always directly clear where to find it (it certainly was for me). Coupled with the fact that Nautilus itself is quite honestly poorly documented, developing for Nautilus can be a little daunting at first.

= GNOME =

A few words of advice. Don't start off by using Google to locate GNOME documentation. Especially in regard to the wiki (GNOME Live!) this doesn't tend to work out well. Try to stick to navigating by clicking links. This is also a good exercise to see if something is organized well enough.

  * Documentation for both end-users and developers can be found in the [http://library.gnome.org/ GNOME Documentation Library]. 
  * Though the GNOME Documentation Library is the official spot for documentation the [http://live.gnome.org/ GNOME Live!] (the GNOME wiki) is probably more helpful.
  * [http://svn.gnome.org/ GNOME Subversion Services].

== Hints ==

  * Documentation that will end up in the GNOME Documentation Library is postfixed with -docs. For example see: [http://svn.gnome.org/viewvc/gnome-user-docs/trunk gnome-user-docs] and [http://svn.gnome.org/viewvc/gnome-devel-docs/trunk/ gnome-devel-docs], See the [http://library.gnome.org/devel/gdp-handbook/stable/intro.html.en GNOME Handbook of Writing Software Documentation].

  * For an example of how a bug report filed against documentation looks, see [http://bugzilla.gnome.org/show_bug.cgi?id=565835 Bug 565835 â€“ Three spelling errors in gtk-doc-manual]. The documentation that describes the procedure for this is [http://live.gnome.org/DocumentationProject/Contributing/SubmittingPatches DocumentationProject/Contributing/SubmittingPatches]. 

  * Source code documentation is automatically generated using GTK-Doc. Usually documentation for use with GTK-doc can be found in trunk/help/, for example see [http://svn.gnome.org/viewvc/gtk-doc/trunk/help/manual/ gtk-doc-manual]. 

= Nautilus documentation =

  * The website for Nautilus can be found at http://projects.gnome.org/nautilus/ 

  * The mailing list can be found at http://mail.gnome.org/archives/nautilus-list/

  * The wiki page for Nautilus can be found at http://live.gnome.org/Nautilus

  * The Nautilus team hangs out on #nautilus at irc.gnome.org.

  * The code for Nautilus can be found in the repository ([http://svn.gnome.org/viewvc/nautilus/trunk viewvc] / [http://svn.gnome.org/svn/nautilus/trunk svn]). 

  * Here's the [http://library.gnome.org/users/user-guide/stable/nautilus.html.en end-user documentation] (accessed through Help -> Contents), interestingly enough there's a chapter on [http://library.gnome.org/users/user-guide/stable/gosnautilus-440.html.en Extending Nautilus] (though it is limited). 

  * The only reference (auto-generated using GTK-doc) currently available for Nautilus is [http://library.gnome.org/devel/libnautilus-extension/stable/ libnautilus-extension], which can be found in Subversion under [http://svn.gnome.org/viewvc/nautilus/trunk/docs/reference/libnautilus-extension/ docs/reference/libnautilus-extension]. Note however that at the moment Nautilus doesn't have any [http://library.gnome.org/devel/gtk-doc-manual/unstable/documenting_syntax.html.en GTK-doc documentation blocks].

= Nautilus extensions =

  _For the moment, see [http://code.google.com/p/nautilussvn/wiki/Architecture Architecture]_

= Who's who =

|| *Full name* || *Nickname* || *Description* || *Links* ||
|| Alex Larsson || alexl || The lead developer for Nautilus. Also works on a lot of other projects, such as GVFS and GTK+. Alex is a Red Hat employee. || [http://blogs.gnome.org/alexl/ Blog], [https://www.ohloh.net/people?query=alexl Ohloh] ||
|| Christian Neumair || manny || || [http://blogs.gnome.org/cneumair/ Blog], [https://www.ohloh.net/people?query=cneumair Ohloh] ||
|| Cosimo Cecchi || cosimoc || Nautilus hacker. Can be asked pretty much anything. || [http://blogs.gnome.org/cosimoc/ Blog], [https://www.ohloh.net/accounts/cosimoc Ohloh] ||
|| Benjamin Otte || Company || Not a Nautilus hacker, but knows a lot about GVFS. Lead developer of swfdec. || [http://blogs.gnome.org/otte/ Blog], [https://www.ohloh.net/accounts/6770 Ohloh] ||

= Nautilus internals =

{{{
|-- ChangeLog                      # what happend (also see svn log)
|-- INSTALL                        # installation instructions
|-- MAINTAINERS                    # the people working on Nautilus
|-- docs
|   |-- nautilus-internals.pdf     # some very old documentation
|-- libnautilus-extension          # the public API, exposed to the outside world
|   |-- nautilus-file-info.c       # exposes Nautilus's private nautilus-file.c
|-- libnautilus-private            # this is Nautilus's internals, never exposed
|   |-- nautilus-file.c            # one of the most important files
|-- po                             # translation files
|-- src                            # main source, lots of dialogs etc.
|   |-- nautilus-main.c            # main
|-- test                           # tests
}}}

= Getting Nautilus =

Subversion is the best way.

{{{
svn co http://svn.gnome.org/svn/nautilus/trunk/ nautilus
}}}

= Building Nautilus =

== Requirements ==
{{{
sudo apt-get build-dep nautilus
sudo apt-get install gnome-common # Missing from the build-dep
}}}

== Building ==

[http://mail.gnome.org/archives/nautilus-list/2004-October/msg00194.html You don't have to make install] when building, you can simply run Nautilus from the build directory.

{{{
./autogen.sh
./configure --prefix="/usr"
make
export TMPDIR=`mktemp`
./src/nautilus --no-desktop .
}}}